# - Find zlib
# Find the native ZLIB includes and library
#
#  ZLIB_INCLUDE_DIR - where to find zlib.h, etc.
#  ZLIB_LIBRARIES   - List of libraries when using zlib.
#  ZLIB_FOUND       - True if zlib found.

MESSAGE("$ENV{LD_LIBRARY_PATH}")

IF (ZLIB_INCLUDE_DIR)
  # Already in cache, be silent
  SET(ZLIB_FIND_QUIETLY TRUE)
ENDIF (ZLIB_INCLUDE_DIR)

SET(NIX_INCLUDE_PATH "$ENV{HOME}/.nix-profile/include")
SET(NIX_LIB_PATH "$ENV{HOME}/.nix-profile/lib")
MESSAGE("NIX_INCLUDE_PATH=" ${NIX_INCLUDE_PATH})
MESSAGE("NIX_LIB_PATH=" ${NIX_LIB_PATH})
INCLUDE_DIRECTORIES( ${NIX_INCLUDE_PATH} )

# ---- Find zlib.h
SET(ZLIB_POSSIBLE_INCLUDE_PATHS
  ${NIX_INCLUDE_PATH}
  /usr/include
)
FIND_PATH(ZLIB_INCLUDE_PATH zlib.h
  ${ZLIB_POSSIBLE_INCLUDE_PATHS}
	/usr/include
)
GET_FILENAME_COMPONENT(ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_PATH} ABSOLUTE)  

SET(CMAKE_INCLUDE_PATH ${ZLIB_INCLUDE_PATH})

MESSAGE("ZLIB_INCLUDE_DIR=" ${ZLIB_INCLUDE_DIR})

INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_PATH})

SET(ZLIB_NAMES z zlib zdll libz)
FIND_LIBRARY(ZLIB_LIBRARY NAMES ${ZLIB_NAMES} PATHS
  ${NIX_LIB_PATH} 
	/lib
	/usr/lib
)
MESSAGE("ZLIB_LIBRARY=${ZLIB_LIBRARY}")

get_filename_component(ZLIB_NAME ${ZLIB_LIBRARY} NAME)
MESSAGE("ZLIB_NAME=${ZLIB_NAME}")

# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if 
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB DEFAULT_MSG ZLIB_LIBRARY ZLIB_INCLUDE_DIR)

IF(ZLIB_FOUND)
  SET( ZLIB_LIBRARIES ${ZLIB_LIBRARY} )
ELSE(ZLIB_FOUND)
  SET( ZLIB_LIBRARIES )
ENDIF(ZLIB_FOUND)

MARK_AS_ADVANCED( ZLIB_LIBRARY ZLIB_INCLUDE_DIR ZLIB_NAME )
