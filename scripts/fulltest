#! /usr/bin/ruby
#
#  Clone and test CMake trees on virtual machines using ssh. See
#  ./doc/TESTING.txt for more info.
#
#  The testing configuration is picked up from a YAML file passed in
#  as the first argument.
#
#  Pjotr Prins (c) 2009
#

require 'yaml'

cmake_support_path = File.dirname(File.dirname(__FILE__))

def msg action, term=''
	print (action+': ').ljust(12),term,"\n"
end

def msgcmd action, cmd=''
  msg action,cmd
  Kernel.system(cmd)
end

msg "Running","cmake-support/scripts/fulltest"
msg "From",cmake_support_path

if ARGV.size == 0
  error "Usage: ./tools/cmake-support/scripts/fulltest configfn [test]\n"
end

configfn = ARGV.shift
testname = ARGV.shift

msg 'Parsing',configfn

config = YAML::load( File.open(configfn) )
p config
config.each do | item |
  next if testname and testname != item[:name]
  msg 'Test',item[:name]
	remote = item[:host]
	remote = item[:user] + '@' + remote if item[:user]
	cmd = "scp -P #{item[:port]} #{item[:script]} #{remote}:"
	msgcmd 'Copy',cmd
	cmd = "ssh -p #{item[:port]} #{remote} /bin/bash \"./#{File.basename(item[:script])} #{item[:project]} #{item[:git]}\""
	msgcmd 'Run',cmd
	cmd = "scp -P #{item[:port]} #{remote}:autotest/#{item[:project]}/test.out #{item[:name]}.result"
	msgcmd 'Fetch',cmd
	cmd = "scp -P #{item[:port]} #{remote}:autotest/#{item[:project]}/testlog.out #{item[:name]}.log"
	msgcmd 'Fetch',cmd
end
